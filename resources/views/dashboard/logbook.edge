@layout.layout({title:'Logbook'})

  @slot('meta')
    <meta name="description" content="Activity logbook for Human Capital Management System" />
  @endslot

  @slot('main')
    <main class="flex-grow-1 p-3 p-lg-4">
      <div class="d-flex align-items-center mb-4">
        <h4 class="mb-0">Logbook</h4>
        <div class="ms-auto d-flex gap-2">
          <button class="btn btn-sm btn-outline-secondary" id="logRefresh"> <i class="bi bi-arrow-repeat"></i></button>
          <button class="btn btn-sm btn-outline-secondary" id="logExport"> <i class="bi bi-download"></i> Export</button>
        </div>
      </div>

      <div class="filter-toolbar small mb-3 row g-2 align-items-center">
        <div class="col-auto">
          <input id="logSearch" class="form-control form-control-sm" placeholder="Cari user / action / detail" />
        </div>
        <div class="col-auto">
          <select id="logLevel" class="form-select form-select-sm">
            <option value="">Semua Level</option>
            <option value="info">Info</option>
            <option value="warn">Warning</option>
            <option value="error">Error</option>
          </select>
        </div>
        <div class="col-auto d-flex align-items-center">
          <label class="small mb-0 me-2">Dari</label>
          <input id="logFrom" type="date" class="form-control form-control-sm" />
        </div>
        <div class="col-auto d-flex align-items-center">
          <label class="small mb-0 me-2">Sampai</label>
          <input id="logTo" type="date" class="form-control form-control-sm" />
        </div>
        <div class="col-auto ms-auto">
          <button class="btn btn-sm btn-outline-secondary" id="logReset">Reset</button>
        </div>
      </div>

      <div class="card">
        <div class="card-header d-flex align-items-center">
          <span class="fw-semibold small">Daftar Log</span>
          <div class="ms-auto small text-muted" id="logCount">@{{ (logs && logs.length) ? logs.length : 0 }}</div>
        </div>
        <div class="table-responsive">
          <table class="table table-sm table-hover table-sticky-head align-middle mb-0">
            <thead>
              <tr>
                <th>Tanggal / Waktu</th>
                <th>Level</th>
                <th>User</th>
                <th>Action</th>
                <th>Detail</th>
              </tr>
            </thead>
            <tbody id="logTbody">
              @if(logs && logs.length > 0)
                @each(log in logs)
                  <tr data-date="{{ log.timestamp || '' }}" data-level="{{ (log.level || '').toLowerCase() }}">
                    <td style="white-space:nowrap">{{ log.timestamp || '-' }}</td>
                    <td>
                      <span class="badge text-bg-{{ (log.level || '').toLowerCase() === 'error' ? 'danger' : ( (log.level || '').toLowerCase() === 'warn' ? 'warning' : 'secondary') }}">{{ log.level || 'info' }}</span>
                    </td>
                    <td>{{ log.user_name || log.user || '—' }}</td>
                    <td>{{ log.action || '—' }}</td>
                    <td class="small text-secondary">{{ log.detail || '' }}</td>
                  </tr>
                @endeach
              @else
                <tr>
                  <td colspan="5" class="text-center small text-muted">Belum ada log.</td>
                </tr>
              @endif
            </tbody>
          </table>
        </div>
      </div>

      <script>
        document.addEventListener('DOMContentLoaded', function () {
          const searchInput = document.getElementById('logSearch');
          const levelSelect = document.getElementById('logLevel');
          const fromInput = document.getElementById('logFrom');
          const toInput = document.getElementById('logTo');
          const resetBtn = document.getElementById('logReset');
          const exportBtn = document.getElementById('logExport');
          const refreshBtn = document.getElementById('logRefresh');
          const tbody = document.getElementById('logTbody');
          const logCount = document.getElementById('logCount');

          function parseDate(value) {
            // Expect ISO-like timestamp; returns Date or null
            if (!value) return null;
            const d = new Date(value);
            return isNaN(d.getTime()) ? null : d;
          }

          function normalize(s) { return (s || '').toString().toLowerCase().trim(); }

          function filterLogs() {
            const q = normalize(searchInput.value);
            const level = normalize(levelSelect.value);
            const from = parseDate(fromInput.value);
            const to = parseDate(toInput.value);
            let visible = 0;

            if (!tbody) return;
            const rows = tbody.querySelectorAll('tr');
            rows.forEach(row => {
              // skip empty row placeholder
              if (!row.dataset) return;
              const rowText = normalize(row.textContent);
              const rowLevel = normalize(row.dataset.level || '');
              const rowDate = parseDate(row.dataset.date);

              let ok = true;
              if (q && rowText.indexOf(q) === -1) ok = false;
              if (level && rowLevel !== level) ok = false;
              if (from && rowDate && rowDate < from) ok = false;
              if (to && rowDate && rowDate > to) ok = false;

              if (ok) {
                row.style.display = '';
                visible++;
              } else {
                row.style.display = 'none';
              }
            });

            if (logCount) logCount.textContent = visible;
          }

          let timer = null;
          if (searchInput) {
            searchInput.addEventListener('input', function () {
              clearTimeout(timer);
              timer = setTimeout(filterLogs, 200);
            });
          }
          if (levelSelect) levelSelect.addEventListener('change', filterLogs);
          if (fromInput) fromInput.addEventListener('change', filterLogs);
          if (toInput) toInput.addEventListener('change', filterLogs);

          if (resetBtn) resetBtn.addEventListener('click', function (e) {
            e.preventDefault();
            searchInput.value = '';
            levelSelect.value = '';
            fromInput.value = '';
            toInput.value = '';
            filterLogs();
          });

          if (refreshBtn) refreshBtn.addEventListener('click', function () { location.reload(); });

          if (exportBtn) exportBtn.addEventListener('click', function () {
            // Export visible rows as CSV
            if (!tbody) return;
            const rows = Array.from(tbody.querySelectorAll('tr')).filter(r => r.style.display !== 'none');
            if (!rows.length) return alert('Tidak ada baris untuk diekspor.');

            const csvRows = [];
            csvRows.push(['timestamp','level','user','action','detail'].join(','));
            rows.forEach(r => {
              const cols = Array.from(r.querySelectorAll('td')).map(td => '"' + (td.textContent || '').replace(/"/g,'""') + '"');
              csvRows.push(cols.join(','));
            });

            const csv = csvRows.join('\n');
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'logbook.csv';
            document.body.appendChild(a);
            a.click();
            a.remove();
            URL.revokeObjectURL(url);
          });

          // initial
          filterLogs();
        });
      </script>

    </main>
  @endslot
@end
